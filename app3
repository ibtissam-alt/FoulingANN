
from PyQt5 import QtCore, QtGui, QtWidgets, QtPrintSupport
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.uic import *
import os
import pandas as pd
import keras
from keras.layers import Dense, Activation
from keras.models import Sequential
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
import sklearn.metrics, math
from keras.callbacks import EarlyStopping
from sklearn.preprocessing import MinMaxScaler
from os import path
import sys

ui_file, _ = loadUiType(path.join(path.dirname(__file__), "C:/Program Files (x86)/Qt Designer/App2.ui"))


class Main(QWidget, ui_file):

    def __init__(self, parent=None):
        super(Main, self).__init__(parent)
        QWidget.__init__(self)
        self.setupUi(self)
        self.push.setText("Open CSV")
        self.push.clicked.connect(self.loadCsv)
        self.push.setFixedWidth(80)
        self.push.setStyleSheet(stylesheet(self))
        self.push1.setText("ANN")
        self.push1.setStyleSheet(stylesheet(self))
        self.push1.setEnabled(False)
        self.push1.clicked.connect(self.ANN)

    def ANN(self):
        print(self.file)
        dataset = pd.read_csv(self.fileName, sep=";", decimal=",")
        print("***************************")
        print(dataset)
        x = dataset.iloc[:, :7].values
        y = dataset.iloc[:, 7].values
        print(y)
        # Normalization

        sc = MinMaxScaler()
        x = sc.fit_transform(x)
        y = y.reshape(-1, 1)
        y = sc.fit_transform(y)

        # Splitting the dataset into the Training set and Test set
        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=4)
        x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.05, random_state=4)

        # built Keras sequential model
        model = Sequential()
        # Adding the input layer:
        model.add(Dense(7, input_dim=x_train.shape[1], activation='relu'))
        # the first hidden layer:
        model.add(Dense(12, activation='relu'))
        # Adding the output layer
        model.add(Dense(1, activation='sigmoid'))

        # Compiling the ANN
        model.compile(optimizer='Nadam', loss='mean_squared_error', metrics=['mse', 'mae', rmse])

        # enable early stopping based on mean_squared_error
        # earlystopping=EarlyStopping(monitor="mean_squared_error", patience=40, verbose=1, mode='auto')

        # Fitting the ANN to the Training set
        result = model.fit(x_train, y_train, validation_data=(x_test, y_test), batch_size=100, epochs=10)

        # get predictions
        y_pred = model.predict(x_test)
        print("R square (R^2):                 %f" % sklearn.metrics.r2_score(y_test, y_pred))
        self.textBrowser.setText(os.path.basename(fileName))
        self.textBrowser_2.setText("R square (R^2):                 %f" % sklearn.metrics.r2_score(y_test, y_pred))

    def loadCsv(self, fileName):
        self.fileName, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Open CSV",
                                                            "C:/Users/hp/Downloads/PFE_fouling/resultats",
                                                            "CSV (*.csv *.tsv )")
        if self.fileName and os.path.isfile(self.fileName):
            self.push1.setEnabled(True)
            


# root mean squared error (rmse) for regression
def rmse(y_true, y_pred):
    from keras import backend
    return backend.sqrt(backend.mean(backend.square(y_pred - y_true), axis=-1))


def stylesheet(self):
    return """
       QTableView
       {
border: 1px solid grey;
border-radius: 0px;
font-size: 12px;
        background-color: #f8f8f8;
selection-color: white;
selection-background-color: #00ED56;
       }

QTableView QTableCornerButton::section {
    background: #D6D1D1;
    border: 1px outset black;
}

QPushButton
{
font-size: 11px;
border: 1px inset grey;
height: 24px;
width: 80px;
color: black;
background-color: #e8e8e8;
background-position: bottom-left;
} 

QPushButton::hover
{
border: 2px inset goldenrod;
font-weight: bold;
color: #e8e8e8;
background-color: green;
} 
"""


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    main = Main()
    main.show()
    sys.exit(app.exec_())
